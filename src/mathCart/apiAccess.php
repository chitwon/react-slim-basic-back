<?php
namespace MathCart;

use MathCart\Database;

require_once __DIR__ . '/../../vendor/autoload.php';

class ApiAccess
{
    private $db;
    private $sqlBuilder;
    private $client;

    public function __construct()
    {
        $this->db = new Database();
        $this->client();
    }

    private function db()
    {
        try {
            $db = new Database();
            $sqlBuilder = $db->getBuilder();
        } catch (Exception $e) {
            echo 'Caught db exception: ' . $e->getMessage() . "\n";
        }
        $this->db = $db;
        $this->sqlBuilder = $sqlBuilder;
    }

    /* get the google client */
    private function client()
    {
        try {
            $client = new \Google_Client();
            $client->setAuthConfigFile(__DIR__ . '/../../client_secrets.json');
            $client->setRedirectUri('http://localhost:3000');
            $this->client = $client;
        } catch (Exception $e) {
            echo 'Caught google client exception: ' . $e->getMessage() . "\n";
        }
    }
    /* gets the google client obj */
    public function getClient()
    {
        return $this->client;
    }

    /*  creates a google oauth obj*/
    private function oauth2($client)
    {
        return new \Google_Service_Oauth2($client);
    }

    /* authenticates the google client, and creates a user info object */
    public function userInfo($client)
    {
        try {
            $oauth2 = $this->oauth2($client);
            $userInfo = $oauth2->userinfo->get();
            return $userInfo;
        } catch (Exception $e) {
            echo 'Caught userInfo($client) : ' . $e->getMessage() . "\n";
        }
    }

    /* takes info returned by google auth, and exchanges it for api token */
    public function exchangeToken($googleToken, $googleExpires, $email)
    {
        $apiToken = 'MC-T-' . bin2hex(openssl_random_pseudo_bytes(64)); //generate a random token
        $tokenExpiration = date('Y-m-d H:i:s', strtotime('+1 hour')); //the expiration date will be in one hour from the current moment
        $this->deleteExpiredToken(); // deletes any expired tokens.
        $array = array(); // array for sql values
        $array['mc_token'] = $apiToken;
        $array['google_expires'] = $googleExpires;
        $array['email'] = $email;
        $array['google_token'] = $googleToken;
        $array['exchange_time'] = date("Y-m-d H:i:s");
        $array['mc_expires'] = $tokenExpiration;

        $this->insertToken($array); // function to actually insert the token into the db
        return array('token' => $apiToken, 'expires' => $tokenExpiration, 'email' => $email);
    }

    /*
    Takes google code, exchanges it for an api token.
    Returns a json object that can be used by an api client
     */
    public function processGoogleCode($code)
    {
        try {
            $client = $this->getClient(); // google object to authenticate the code
            $clientObj = $client->authenticate($code);
            
            $logArray = array("MathCart Google Auth Object"); // array to store data
            $token = $clientObj['access_token'];
            $logArray[] = $token;
            // seconds until token expires
            $expires = $clientObj['expires_in'];
            $logArray[] = $expires;
            // user info
            
            $userInfo = $this->userInfo($client);
            $logArray['userInfo'] = $userInfo;
            
            $apiExchange = $this->exchangeToken($token, $expires, $userInfo->email);
            $logArray['mcToken'] = $apiExchange['token'];
            $logArray[] = $apiExchange['expires'];
            $logArray[] = $apiExchange['email'];
            return $logArray;
        } catch (Exception $e) {
            echo 'Caught userInfo($client) : ' . $e->getMessage() . "\n";
        }
    }

    /* takes a token generated by this api, and inserts into the database */
    public function insertToken($array)
    {
        try {
            $query = $this->db->builder->insert()
                ->setTable('exchanged_tokens')
                ->setValues($array);
            $sql = $this->db->builder->write($query);
            $values = $this->db->builder->getValues();
            // delete any previous tokens with same email - no need for duplicates.
            if (isset($array['email'])) {
                $this->deleteTokenByEmail($array['email']);
            }
            
            if ($this->db->insertRow($sql, $values)) {
                return true;
            }
            return json_encode(array('error' => 'did not insert token'));
        } catch (Exception $e) {
            echo 'Caught insertUser: ' . $e->getMessage() . "\n";
        }
    }

    /* checks a token and email against the database.
    Returns and updates timestamp of legit token, or
    returns false */
    public function checkToken($token, $email)
    {
        try {
            // $this->deleteExpiredToken();
            $query = $this->db->builder->select();
            $query->setTable('exchanged_tokens')
                ->where()
                ->equals('mc_token', $token)
                ->equals('email', $email);
            $sql = $this->db->builder->write($query);
            $values = $this->db->builder->getValues();
            // return $sql . serialize($values);
            // $row = null;
            $row = $this->db->getRow($sql, $values);
            if ($row['mc_token'] == $token) {
                return true;
            }

            return false;
        } catch (PDOException $e) {
            echo $e->getMessage();
        }

    }

    /* deletes any expired tokens */
    public function deleteExpiredToken()
    {

        try {
            $query = $this->db->builder->delete();
            $query->setTable('exchanged_tokens')
                ->where()->lessThan('mc_expires', date("Y-m-d H:i:s"));
            $sql = $this->db->builder->write($query);
            $values = $this->db->builder->getValues();
            return $this->db->insertRow($sql, $values);

        } catch (PDOException $e) {
            echo $e->getMessage();
        }

    }

    /*
    Deletes any tokens associated with email.
    Called when inserting a token to eliminate duplicate emails
     */
    public function deleteTokenByEmail($email)
    {

        try {
            $query = $this->db->builder->delete();
            $query->setTable('exchanged_tokens')
                ->where()->equals('email', $email);
            $sql = $this->db->builder->write($query);
            $values = $this->db->builder->getValues();
            return $this->db->insertRow($sql, $values);
        } catch (PDOException $e) {
            echo $e->getMessage();
        }

    }

    function returnHws($email) 
    {
        try {
            $query = $this->db->builder->select();
            $query->setTable('submitted_hw')
                ->where()
                ->equals('student_email', $email);
            $sql = $this->db->builder->write($query);
            $values = $this->db->builder->getValues();
            $rows = $this->db->getRows($sql, $values);
            return $rows;
            
        } catch (PDOException $e) {
            echo $e->getMessage();
        }

    }
}
